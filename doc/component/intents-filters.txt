    # Intents #
1. start Activity
    1) startActivity
    2) startActivityForResult
         Your activity receives the result as a separate Intent object in your activity's onActivityResult() callback.

2. To start a service
    1) startService()
    2) passing an Intent to bindService()
        ps: Implicit intents do not name a specific component, but instead declare a general action to perform, which allows a component from another app to handle it.

3. To deliver a broadcast
    
    # Intent Types #
1. [Explicit intents] specify the component to start by name (the fully-qualified class name). You'll typically use an explicit intent to start a component in your own app, because you know the class name of the activity or service you want to start.
2. [Implicit intents] do not name a specific component, but instead declare a general action to perform, which allows a component from another app to handle it.

    # Building an Intent #
The primary information contained in an Intent:
1) Component name: The name of the component to start
    This field of the Intent is a ComponentName object, which you can specify using a fully qualified class name of the target component, including the package name of the app. For example, com.example.ExampleActivity
2) Action
    If you define your own actions, be sure to include your app's package name as a prefix. For example:

    static final String ACTION_TIMETRAVEL = "com.example.action.TIMETRAVEL"
3) Data
    If you want to set both the URI and MIME type, do not call setData() and setType() because they each nullify the value of the other. Always use setDataAndType() to set both URI and MIME type.
4) Category

These properties listed above (component name, action, data, and category) represent the defining characteristics of an intent

Extras: Key-value pairs that carry additional information required to accomplish the requested action
    putExtra()
Flags

    # example #
Caution: It's possible that a user won't have any apps that handle the implicit intent you send to startActivity(). If that happens, the call will fail and your app will crash. To verify that an activity will receive the intent, call resolveActivity() on your Intent object. If the result is non-null, then there is at least one app that can handle the intent and it's safe to call startActivity(). If the result is null, you should not use the intent and, if possible, you should disable the feature that issues the intent.
    coding: 
        Intent sendIntent = new Intent(Intent.ACTION_SEND);
        ...

        // Always use string resources for UI text.
        // This says something like "Share this photo with"
        String title = getResources().getString(R.string.chooser_title);
        // Create intent to show the chooser dialog
        Intent chooser = Intent.createChooser(sendIntent, title);

        // Verify the original intent will resolve to at least one activity
        if (sendIntent.resolveActivity(getPackageManager()) != null) {
                startActivity(chooser);
        }

    # Receiving an Implicit Intent #
1. declare one or more intent filters for each of your app components with an <intent-filter> element in your manifest file [action, data, and category]
2. An explicit intent is always delivered to its target, regardless of any intent filters the component declares.
3. Inside the <intent-filter>, you can specify the type of intents to accept using one or more of these three elements:
    1) <action>
        Declares the intent action accepted, in the name attribute. The value must be the literal string value of an action, not the class constant.
    2) <data>
        Declares the type of data accepted, using one or more attributes that specify various aspects of the data URI (scheme, host, port, path, etc.) and MIME type.
    3) <category>
        Declares the intent category accepted, in the name attribute. The value must be the literal string value of an action, not the class constant.
    note: In order to receive implicit intents, you must include the CATEGORY_DEFAULT category in the intent filter. The methods startActivity() and startActivityForResult() treat all intents as if they declared the CATEGORY_DEFAULT category. If you do not declare this category in your intent filter, no implicit intents will resolve to your activity.

    # Example filters #
1. The ACTION_MAIN action indicates this is the main entry point and does not expect any intent data.
2. The CATEGORY_LAUNCHER category indicates that this activity's icon should be placed in the system's app launcher. If the <activity> element does not specify an icon with icon, then the system uses the icon from the <application> element.

3. [PeddingIntent] object

    # Intent Resolution #
1. The intent action | The intent data (both URI and data type) | The intent category

2. 匹配测试：
    1) Action test
    2) Category test
        Android automatically applies the the CATEGORY_DEFAULT category to all implicit intents passed to startActivity() and startActivityForResult(). So if you want your activity to receive implicit intents, it must include a category for "android.intent.category.DEFAULT" in its intent filters (as shown in the previous <intent-filter> example.)
    3) Data test
        * Each of these attributes is optional in a <data> element, but there are linear dependencies:
            - If a scheme is not specified, the host is ignored.
            - If a host is not specified, the port is ignored.
            - If both the scheme and host are not specified, the path is ignored.

        * When the URI in an intent is compared to a URI specification in a filter, it's compared only to the parts of the URI included in the filter. For example:

            - If a filter specifies only a scheme, all URIs with that scheme match the filter.
            - If a filter specifies a scheme and an authority but no path, all URIs with the same scheme and authority pass the filter, regardless of their paths.
            - If a filter specifies a scheme, an authority, and a path, only URIs with the same scheme, authority, and path pass the filter.
